// calculator.js - B√†i t·∫≠p 2: Command Line Calculator
// Y√™u c·∫ßu: T·∫°o m√°y t√≠nh t·ª´ command line
// C√°ch ch·∫°y: node calculator.js 10 + 5

// TODO: L·∫•y arguments t·ª´ command line
const args = process.argv.slice(2);

// TODO: Ki·ªÉm tra s·ªë l∆∞·ª£ng arguments
if (args.length !== 3) {
  console.log('‚ùå Sai c√∫ ph√°p!');
  console.log('‚úÖ C√°ch s·ª≠ d·ª•ng: node calculator.js <s·ªë1> <ph√©p t√≠nh> <s·ªë2>');
  console.log('üìù V√≠ d·ª•: node calculator.js 10 + 5');
  console.log('üî¢ Ph√©p t√≠nh h·ªó tr·ª£: +, -, *, /, %, **');
  process.exit(1);
}

// TODO: Parse arguments
const num1 = parseFloat(args[0]);
const operator = args[1];
const num2 = parseFloat(args[2]);

// TODO: Validate numbers
if (isNaN(num1) || isNaN(num2)) {
  console.log('‚ùå L·ªói: Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!');
  console.log('üìù V√≠ d·ª•: node calculator.js 10.5 + 2.3');
  process.exit(1);
}

// TODO: Validate operator
const validOperators = ['+', '-', '*', '/', '%', '**'];
if (!validOperators.includes(operator)) {
  console.log('‚ùå L·ªói: Ph√©p t√≠nh kh√¥ng h·ª£p l·ªá!');
  console.log('‚úÖ Ph√©p t√≠nh h·ªó tr·ª£:', validOperators.join(', '));
  process.exit(1);
}

// TODO: Perform calculation
let result;
let operatorName;

switch (operator) {
  case '+':
    result = num1 + num2;
    operatorName = 'c·ªông';
    break;
  case '-':
    result = num1 - num2;
    operatorName = 'tr·ª´';
    break;
  case '*':
    result = num1 * num2;
    operatorName = 'nh√¢n';
    break;
  case '/':
    if (num2 === 0) {
      console.log('‚ùå L·ªói: Kh√¥ng th·ªÉ chia cho 0!');
      process.exit(1);
    }
    result = num1 / num2;
    operatorName = 'chia';
    break;
  case '%':
    if (num2 === 0) {
      console.log('‚ùå L·ªói: Kh√¥ng th·ªÉ chia cho 0!');
      process.exit(1);
    }
    result = num1 % num2;
    operatorName = 'chia l·∫•y d∆∞';
    break;
  case '**':
    result = Math.pow(num1, num2);
    operatorName = 'l≈©y th·ª´a';
    break;
  default:
    console.log('‚ùå L·ªói: Ph√©p t√≠nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!');
    process.exit(1);
}

// TODO: Display result
console.log('üßÆ === CALCULATOR ===');
console.log(`üìä Ph√©p t√≠nh: ${num1} ${operator} ${num2}`);
console.log(`üìù M√¥ t·∫£: ${num1} ${operatorName} ${num2}`);
console.log(`‚úÖ K·∫øt qu·∫£: ${result}`);

// Bonus: Th√™m th√¥ng tin chi ti·∫øt
if (operator === '/') {
  console.log(`üî¢ K·∫øt qu·∫£ l√†m tr√≤n: ${Math.round(result * 100) / 100}`);
}

if (operator === '**') {
  console.log(`üìà ${num1} m≈© ${num2} = ${result}`);
}

// Bonus: Hi·ªÉn th·ªã th√™m th√¥ng tin
console.log('\nüìã === TH√îNG TIN TH√äM ===');
console.log(`üî¢ Ki·ªÉu d·ªØ li·ªáu k·∫øt qu·∫£: ${typeof result}`);
console.log(`üî¢ S·ªë c√≥ nguy√™n kh√¥ng: ${Number.isInteger(result) ? 'C√≥' : 'Kh√¥ng'}`);
console.log(`üî¢ S·ªë d∆∞∆°ng/√¢m: ${result > 0 ? 'D∆∞∆°ng' : result < 0 ? '√Çm' : 'B·∫±ng 0'}`);

// Bonus: L∆∞u l·ªãch s·ª≠ (n·∫øu mu·ªën)
const fs = require('fs');
const historyEntry = `${new Date().toISOString()}: ${num1} ${operator} ${num2} = ${result}\n`;

try {
  fs.appendFileSync('calculator-history.txt', historyEntry);
  console.log('üìù ƒê√£ l∆∞u v√†o l·ªãch s·ª≠: calculator-history.txt');
} catch (error) {
  console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠:', error.message);
}

// C√°ch ch·∫°y:
// node calculator.js 10 + 5
// node calculator.js 20 - 3
// node calculator.js 4 * 7
// node calculator.js 15 / 3
// node calculator.js 10 % 3
// node calculator.js 2 ** 8 